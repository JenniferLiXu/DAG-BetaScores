DAGs <- example[[1]]
# beta_values is a list of matrices from calculateBetaScoresArray
beta_values <- calculateBetaScoresArray(DAGs, k = length(DAGs) ,n)
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
#weighted_betas[[2]] <- is_with_get_weight(beta_values, DAG_Test)
# Update the order for the next iteration
permy <- unlist(example[[4]][length(example[[4]])])
}
# load the necessary functions
#source('./edgerevandstructure/newedgerevfns.R')
#source('./edgerevandstructure/newedgerevmove.R')
source('./orderMCMC_betas.R')
source('./orderscore_betas.R')
source('./samplefns-beta.R')
source('./scoring/scorefns.R')
#Use the function to calculate beta values
source('./calculateBetaScoresArray.R')
weighted_betas
averaged_ess
for (i in 1:iter) {
example <- orderMCMC_betas(n,startorder = permy,iterations = 10,
stepsave = 1, moveprobs)
DAGs <- example[[1]]
# beta_values is a list of matrices from calculateBetaScoresArray
beta_values <- calculateBetaScoresArray(DAGs, k = length(DAGs) ,n)
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
#weighted_betas[[2]] <- is_with_get_weight(beta_values, DAG_Test)
# Update the order for the next iteration
permy <- unlist(example[[4]][length(example[[4]])])
}
i
betas[i, -i]
sum(log(1 + exp(betas[i, -i])))
for (i in 1:iter) {
example <- orderMCMC_betas(n,startorder = permy,iterations = 10,
betas = weighted_betas[[i]],
stepsave = 1, moveprobs)
DAGs <- example[[1]]
# beta_values is a list of matrices from calculateBetaScoresArray
beta_values <- calculateBetaScoresArray(DAGs, k = length(DAGs) ,n)
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
#weighted_betas[[2]] <- is_with_get_weight(beta_values, DAG_Test)
# Update the order for the next iteration
permy <- unlist(example[[4]][length(example[[4]])])
}
print(averaged_ess)
library(BiDAG)
library(pcalg)
library(igraph)
library(bnlearn)
seedset<-1 # set a seed?
seednumber<-101 # an example used
# load the necessary functions
#source('./edgerevandstructure/newedgerevfns.R')
#source('./edgerevandstructure/newedgerevmove.R')
source('./orderMCMC_betas.R')
source('./orderscore_betas.R')
# load the necessary functions
#source('./edgerevandstructure/newedgerevfns.R')
#source('./edgerevandstructure/newedgerevmove.R')
source('./orderMCMC_betas.R')
source('./orderscore_betas.R')
source('./samplefns-beta.R')
source('./scoring/scorefns.R')
#Use the function to calculate beta values
source('./calculateBetaScoresArray.R')
# Example: Generating a random dataset
set.seed(123)
data <- matrix(rnorm(1400), ncol = 14)  # A dataset with 14 variables
# Choose whether to save the plots to png or pdf
saveoutput<-1 # 1 means save
filetypes<-c(".png",".pdf") # choose png or pdf for the figures
filetypey<-1 # we use png here
# Specify the conditional independence test
# gaussCItest is used for continuous data (assuming Gaussian distribution)
ciTest <- gaussCItest
# Apply the PC algorithm
pcFit <- pc(suffStat = list(C = cor(data), n = nrow(data)),
indepTest = ciTest, p = 14, alpha = 0.05)
# Convert the output to an adjacency matrix
adjMatrix <- as(pcFit, "amat")
#Importance Sampling
importance_beta <- function(target_beta, beta_values){
if (is.null(dim(target_beta)) || is.null(dim(beta_values))) {
stop("target_beta and beta_values must be matrices or arrays.")
}
n <- dim(target_beta)[1]
# Initialize the matrix for averaged beta values
averaged_beta_matrix <- matrix(NA, n, n)
ess_matrix <- matrix(NA, n, n)
total_ess <- 0
total_entries <- 0
# Iterate over each matrix position
for (row in 1:n) {
for (col in 1:n) {
if (row != col) {  # Exclude diagonal elements
values <- beta_values[row, col, ]  # Extract values from the same position in all matrices
weights <- (target_beta[row, col, 1])/values  # Define or compute weights for these values
normalized_weights <- weights / sum(weights) # Normalized weights
ess_value <- 1 / sum(normalized_weights^2)
ess_matrix[row, col] <- ess_value
total_ess <- total_ess + ess_value
total_entries <- total_entries + 1
# Compute the weighted average and assign it to the averaged matrix
averaged_beta_matrix[row, col] <- sum(values * normalized_weights)
}
}
}
average_ess <- total_ess / total_entries
return(list(averaged_beta_matrix = averaged_beta_matrix, ess_matrix = ess_matrix, average_ess = average_ess))
}
# For continuous data
scoreParam <- BiDAG::scoreparameters("bge", BiDAG::Boston)
#BiDAG:::DAGcorescore(2, c(3,5), n = 14, param = scoreParam)
itfit<-learnBN(scoreParam,algorithm="orderIter")
maxEC<-getDAG(itfit,cp=TRUE)
DAG_Test <- list()
DAG_Test[[1]] <- maxEC
target_beta <- calculateBetaScoresArray(DAG_Test, k = length(DAG_Test), n)
# get the probability of a parent node being the parent of a child node
get_probability <- function(betas, parentNode, childNode, DAG_Test){
incidence <- DAG_Test[[1]]
get_probability <- numeric()
if (parentNode != childNode) {
# Check if parentNode is actually a parent in this DAG
exp_beta <- exp(betas[parentNode,childNode, ])
if (incidence[parentNode, childNode] == 1){
get_probability <- exp_beta/(1 + exp_beta)
}else{
get_probability <- 1/(1 + exp_beta)
}
}else{
# weight is not applicable for self (node cannot be its own parent)
get_probability <- NA
}
return(get_probability)
}
# with weights defined by probabilities
is_with_get_weight <- function(beta_values, DAG_Test){
# Initialize the matrix for averaged beta values
averaged_beta_matrix <- matrix(0, n, n)
# Replace diagonal elements with NA
diag(averaged_beta_matrix) <- NA
values <-  numeric()
weights <-  numeric()
# Iterate over each matrix position
for (row in 1:n) {
for (col in 1:n) {
if (row != col) {  # Exclude diagonal elements
values <- beta_values[row, col, ]  # Extract values from the same position in all matrices
weights <- get_probability(beta_values, row, col, DAG_Test)  # Define or compute weights for these values
# Compute the weighted average and assign it to the averaged matrix
averaged_beta_matrix[row, col] <- sum(values * weights)
}
}
}
return(averaged_beta_matrix)
}
# Initialize
n <- 14
target_beta
# For continuous data
scoreParam <- BiDAG::scoreparameters("bge", BiDAG::Boston)
#BiDAG:::DAGcorescore(2, c(3,5), n = 14, param = scoreParam)
itfit<-learnBN(scoreParam,algorithm="orderIter")
maxEC<-getDAG(itfit,cp=TRUE)
DAG_Test <- list()
DAG_Test[[1]] <- maxEC
target_beta <- calculateBetaScoresArray(DAG_Test, k = length(DAG_Test), n)
n <- 14
DAG_Test[[1]] <- maxEC
target_beta <- calculateBetaScoresArray(DAG_Test, k = length(DAG_Test), n)
DAG_Test[[1]] <- maxEC
target_beta <- calculateBetaScoresArray(DAG_Test, k = length(DAG_Test), n)
n <- 14
DAG_Test[[1]] <- maxEC
target_beta <- calculateBetaScoresArray(DAG_Test, k = length(DAG_Test), n)
n <- 14
DAG_Test[[1]] <- maxEC
target_beta <- calculateBetaScoresArray(DAG_Test, k = length(DAG_Test), n)
# get the probability of a parent node being the parent of a child node
get_probability <- function(betas, parentNode, childNode, DAG_Test){
incidence <- DAG_Test[[1]]
get_probability <- numeric()
if (parentNode != childNode) {
# Check if parentNode is actually a parent in this DAG
exp_beta <- exp(betas[parentNode,childNode, ])
if (incidence[parentNode, childNode] == 1){
get_probability <- exp_beta/(1 + exp_beta)
}else{
get_probability <- 1/(1 + exp_beta)
}
}else{
# weight is not applicable for self (node cannot be its own parent)
get_probability <- NA
}
return(get_probability)
}
# with weights defined by probabilities
is_with_get_weight <- function(beta_values, DAG_Test){
# Initialize the matrix for averaged beta values
averaged_beta_matrix <- matrix(0, n, n)
# Replace diagonal elements with NA
diag(averaged_beta_matrix) <- NA
values <-  numeric()
weights <-  numeric()
# Iterate over each matrix position
for (row in 1:n) {
for (col in 1:n) {
if (row != col) {  # Exclude diagonal elements
values <- beta_values[row, col, ]  # Extract values from the same position in all matrices
weights <- get_probability(beta_values, row, col, DAG_Test)  # Define or compute weights for these values
# Compute the weighted average and assign it to the averaged matrix
averaged_beta_matrix[row, col] <- sum(values * weights)
}
}
}
return(averaged_beta_matrix)
}
# Create a zero-matrix as our starting betas
beta_matrix <- matrix(c(0), nrow = 14, ncol = 14, byrow = TRUE)
# Replace diagonal elements with NA
diag(beta_matrix) <- NA
# Convert the matrix to an array
betas <- array(beta_matrix, dim = c(14, 14))
# Define the starting order
permy <- c(1:14)
# Calculate move probabilities
prob1<-99
if(n>3){ prob1<-round(6*99*n/(n^2+10*n-24)) }
prob1<-prob1/100
moveprobs<-c(prob1,0.99-prob1,0.01)
moveprobs<-moveprobs/sum(moveprobs) # normalisation
# Number of iterations
iter <- 10
weighted_betas <- list(betas)
averaged_ess <- numeric(iter)
for (i in 1:iter) {
example <- orderMCMC_betas(n,startorder = permy,iterations = 10,
betas = weighted_betas[[i]],
stepsave = 1, moveprobs)
DAGs <- example[[1]]
# beta_values is a list of matrices from calculateBetaScoresArray
beta_values <- calculateBetaScoresArray(DAGs, k = length(DAGs) ,n)
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
#weighted_betas[[2]] <- is_with_get_weight(beta_values, DAG_Test)
# Update the order for the next iteration
permy <- unlist(example[[4]][length(example[[4]])])
}
print(averaged_ess)
?BiDAG::scoreparameters
DAG_scores <- numeric()
DAG_scores <- list()
importance_DAG <- function(scores){
# To avoid numerical issues, subtract the max score before exponentiating
max_score <- max(scores)
exp_scores <- exp(scores - max_score)
# Normalize the exponentiated scores to get the importance weights
importance_weights <- exp_scores / sum(exp_scores)
ess_value <- 1 / sum(importance_weights^2)
return(list(importance_weights = importance_weights, ess_value = ess_value))
}
averaged_beta_ess <- numeric(iter)
i
i=1
i <- 1
example <- orderMCMC_betas(n,startorder = permy,iterations = 10,
betas = weighted_betas[[i]],
stepsave = 1, moveprobs)
DAGs <- example[[1]]
DAG_scores[[i]] <-  example[[2]]
DAG_scores[[i]]
# beta_values is a list of matrices from calculateBetaScoresArray
beta_values <- calculateBetaScoresArray(DAGs, k = length(DAGs) ,n)
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
ess_DAGs <- importance_weights(DAG_scores[[i]])
ess_DAGs <- importance_DAG(DAG_scores[[i]])
ess_DAGs <- importance_DAG(DAG_scores[[i]])$ess_value
ess_DAGs <- importance_DAG(DAG_scores[[i]])$ess_value
DAGs
DAG_scores
beta_values
example[[3]]
source('./samplefns-beta.R')
DAG_scores[[i]] <-  example[[2]]
DAG_scores[[i]]
example[[2]]
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
ess_DAGs <- importance_DAG(DAG_scores[[i]])$ess_value
# Update the order for the next iteration
permy <- unlist(example[[4]][length(example[[4]])])
i <- 2
example <- orderMCMC_betas(n,startorder = permy,iterations = 10,
betas = weighted_betas[[i]],
stepsave = 1, moveprobs)
DAGs <- example[[1]]
DAG_scores[[i]] <-  example[[2]]
# beta_values is a list of matrices from calculateBetaScoresArray
beta_values <- calculateBetaScoresArray(DAGs, k = length(DAGs) ,n)
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
ess_DAGs <- importance_DAG(DAG_scores[[i]])$ess_value
example[[2]]
importance_DAG <- function(scores){
# To avoid numerical issues, subtract the max score before exponentiating
scores <- unlist(scores)
max_score <- max(scores)
exp_scores <- exp(scores - max_score)
# Normalize the exponentiated scores to get the importance weights
importance_weights <- exp_scores / sum(exp_scores)
ess_value <- 1 / sum(importance_weights^2)
return(list(importance_weights = importance_weights, ess_value = ess_value))
}
ess_DAGs <- importance_DAG(DAG_scores[[i]])$ess_value
ess_DAGs
# Create a zero-matrix as our starting betas
beta_matrix <- matrix(c(0), nrow = 14, ncol = 14, byrow = TRUE)
# Replace diagonal elements with NA
diag(beta_matrix) <- NA
# Convert the matrix to an array
betas <- array(beta_matrix, dim = c(14, 14))
# Define the starting order
permy <- c(1:14)
# Calculate move probabilities
prob1<-99
if(n>3){ prob1<-round(6*99*n/(n^2+10*n-24)) }
prob1<-prob1/100
moveprobs<-c(prob1,0.99-prob1,0.01)
moveprobs<-moveprobs/sum(moveprobs) # normalisation
# Number of iterations
iter <- 10
weighted_betas <- list(betas)
averaged_beta_ess <- numeric(iter)
ess_DAGs <- numeric(iter)
DAG_scores <- list()
for (i in 1:iter) {
example <- orderMCMC_betas(n,startorder = permy,iterations = 10,
betas = weighted_betas[[i]],
stepsave = 1, moveprobs)
DAGs <- example[[1]]
DAG_scores[[i]] <-  example[[2]]
# beta_values is a list of matrices from calculateBetaScoresArray
beta_values <- calculateBetaScoresArray(DAGs, k = length(DAGs) ,n)
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
#weighted_betas[[2]] <- is_with_get_weight(beta_values, DAG_Test)
ess_DAGs[i] <- importance_DAG(DAG_scores[[i]])$ess_value
# Update the order for the next iteration
permy <- unlist(example[[4]][length(example[[4]])])
}
ess_DAGs
i <- 1
weighted_betas <- list(betas)
averaged_beta_ess <- numeric(iter)
ess_DAGs <- numeric(iter)
DAG_scores <- list()
example <- orderMCMC_betas(n,startorder = permy,iterations = 10,
betas = weighted_betas[[i]],
stepsave = 1, moveprobs)
DAGs <- example[[1]]
DAG_scores[[i]] <-  example[[2]]
# beta_values is a list of matrices from calculateBetaScoresArray
beta_values <- calculateBetaScoresArray(DAGs, k = length(DAGs) ,n)
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
ess_DAGs[i] <- importance_DAG(DAG_scores[[i]])$ess_value
ess_DAGs[i]
example[[2]]
DAGs
betas
weighted_betas <- list(betas)
averaged_beta_ess <- numeric(iter)
ess_DAGs <- numeric(iter)
DAG_scores <- list()
for (i in 1:iter) {
example <- orderMCMC_betas(n,startorder = permy,iterations = 10,
betas = weighted_betas[[i]],
stepsave = 1, moveprobs)
DAGs <- example[[1]]
DAG_scores[[i]] <-  example[[2]]
# beta_values is a list of matrices from calculateBetaScoresArray
beta_values <- calculateBetaScoresArray(DAGs, k = length(DAGs) ,n)
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
#weighted_betas[[2]] <- is_with_get_weight(beta_values, DAG_Test)
ess_DAGs[i] <- importance_DAG(DAG_scores[[i]])$ess_value
# Update the order for the next iteration
permy <- unlist(example[[4]][length(example[[4]])])
}
ess_DAGs
# Number of iterations
iter <- 100
# Number of iterations
iter <- 100
weighted_betas <- list(betas)
averaged_beta_ess <- numeric(iter)
ess_DAGs <- numeric(iter)
DAG_scores <- list()
for (i in 1:iter) {
example <- orderMCMC_betas(n,startorder = permy,iterations = 100,
betas = weighted_betas[[i]],
stepsave = 1, moveprobs)
DAGs <- example[[1]]
DAG_scores[[i]] <-  example[[2]]
# beta_values is a list of matrices from calculateBetaScoresArray
beta_values <- calculateBetaScoresArray(DAGs, k = length(DAGs) ,n)
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
#weighted_betas[[2]] <- is_with_get_weight(beta_values, DAG_Test)
ess_DAGs[i] <- importance_DAG(DAG_scores[[i]])$ess_value
# Update the order for the next iteration
permy <- unlist(example[[4]][length(example[[4]])])
}
sample.int
?sample.int
sample.int(3,1,prob=moveprobs)
sample.int(3,1,prob=moveprobs)
sample.int(3,1,prob=moveprobs)
n
sample.int(n,2,replace=FALSE)
sample.int(n-1,1)
ess_DAGs
# Number of iterations
iter <- 100
weighted_betas <- list(betas)
averaged_beta_ess <- numeric(iter)
ess_DAGs <- numeric(iter)
DAG_scores <- list()
for (i in 1:iter) {
example <- orderMCMC_betas(n,startorder = permy,iterations = 100,
betas = weighted_betas[[i]],
stepsave = 1, moveprobs)
DAGs <- example[[1]]
DAG_scores[[i]] <-  example[[2]]
# beta_values is a list of matrices from calculateBetaScoresArray
beta_values <- calculateBetaScoresArray(DAGs, k = length(DAGs) ,n)
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
#weighted_betas[[2]] <- is_with_get_weight(beta_values, DAG_Test)
ess_DAGs[i] <- importance_DAG(DAG_scores[[i]])$ess_value
# Update the order for the next iteration
permy <- unlist(example[[4]][length(example[[4]])])
}
?cat
# load the necessary functions
#source('./edgerevandstructure/newedgerevfns.R')
#source('./edgerevandstructure/newedgerevmove.R')
source('./orderMCMC_betas.R')
source('./orderscore_betas.R')
source('./samplefns-beta.R')
source('./scoring/scorefns.R')
#Use the function to calculate beta values
source('./calculateBetaScoresArray.R')
# Number of iterations
iter <- 20
weighted_betas <- list(betas)
averaged_beta_ess <- numeric(iter)
ess_DAGs <- numeric(iter)
DAG_scores <- list()
for (i in 1:iter) {
example <- orderMCMC_betas(n,startorder = permy,iterations = 10,
betas = weighted_betas[[i]],
stepsave = 1, moveprobs)
DAGs <- example[[1]]
DAG_scores[[i]] <-  example[[2]]
# beta_values is a list of matrices from calculateBetaScoresArray
beta_values <- calculateBetaScoresArray(DAGs, k = length(DAGs) ,n)
# Update beta values using importance sampling
is_results <- importance_beta(target_beta, beta_values)
weighted_betas[[i + 1]] <- is_results$averaged_beta_matrix
averaged_ess[i] <- is_results$average_ess
#weighted_betas[[2]] <- is_with_get_weight(beta_values, DAG_Test)
ess_DAGs[i] <- importance_DAG(DAG_scores[[i]])$ess_value
# Update the order for the next iteration
permy <- unlist(example[[4]][length(example[[4]])])
}
betas
beta_values
max(unlist(beta_values))
exp(50)
exp(300)
ess_DAGs
