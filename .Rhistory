order_prev <- order
ess_DAGs <- numeric()
count_accept <- numeric()
diff_BiDAGs <- numeric()
burin_iter <- floor(burnin*iteration)
iter <- iteration + burin_iter
# DAG <- starting_dag
init_sampled_DAGs <- lapply(1:nr_sample, function(x) samplescore(n, betas_init, order[[1]]))
prev_DAG <- lapply(init_sampled_DAGs, function(dag) dag$incidence)
BiDAGscore_prev <- calculateBetaScoresArray_hash(prev_DAG, k = length(prev_DAG), n, base_score)$target_DAG_score
compress_DAG <- starting_dag
total_DAG <- matrix(0, nrow = n, ncol = n)
edge_over_time <- array(0, dim = c(n, n, iter))
edge_diff_over_time <- array(0, dim = c(n, n, iter))
prev_weight <- 1
weight_MIS <- numeric()
weight_MIS_sum <- 1
weight <- numeric()
# Looping through iterations
for (i in 1:iter) {
# Sampling orders with OrderMCMC
example <- orderMCMC_betas(n,startorder = order_prev[[length(order_prev)]] ,iterations = order_iter, betas = beta_prev,
stepsave = order_stepsize, moveprobs) # run the Order MCMC code
proposed_orders <- example[[4]][-1]
#  Sample nr_sample DAGs using the last sampled order from OrderMCMC and old beta matrix
incidence_matrices <- example[[1]][-1] # List of DAGs sampled under previous beta
incidence_logscore <- example[[2]][-1] # List of logscores of new sampled DAGs under previous beta
# Update beta matrix using the weights from sampled DAGs
calculation_beta_values <- calculateBetaScoresArray_hash(incidence_matrices, k = length(incidence_matrices) ,n, base_score = base_score)
BiDAGscore_propose_list <- calculation_beta_values$target_DAG_score
BiDAGscore_propose <-  calculate_final_score(BiDAGscore_propose_list, operation = "mean")
beta_values <- calculation_beta_values$allBetaScores
# Update beta matrix using importance sampling
is_results <- importance_DAG(DAGs = incidence_matrices, score_under_betas = incidence_logscore, target_scores = BiDAGscore_propose_list)
weights_proposed <- is_results$importance_weights # normalised weights under old beta
#New beta matrix using the normalised weights
weighted_betas_proposed <- Reduce("+", lapply(1:length(weights_proposed), function(k) beta_values[,,k] * weights_proposed[k]))
# Log score of new DAG set under the old beta
nDAGoBeta_logscore <- calculate_final_score(unlist(incidence_logscore), operation = "mean")
# Log score of old DAG set under the new beta
oDAGnBeta_logscore_list <- lapply(1:length(prev_DAG),
function(k) calculate_DAG_score(DAG_list = prev_DAG[k], permy = order_prev[[k]], weights = NULL ,
betas = weighted_betas_proposed, base_score = base_score))
oDAGnBeta_logscore <- calculate_final_score(unlist(oDAGnBeta_logscore_list), operation = "mean")
# Acceptance ratio
# Test
w_prev <- BiDAGscore_prev - oDAGnBeta_logscore
w_current <- BiDAGscore_propose - nDAGoBeta_logscore
cat("w_prev",w_prev, "w_current", w_current, "\n")
weight[i] <- exp(w_current-w_prev)
cat("weight",weight[i], "\n")
compress_DAG[[i+1]] <- is_results$compress_dag
weighted_betas[[i+1]] <- weighted_betas_proposed
BiDAGscore_prev <- BiDAGscore_propose
prev_DAG <- incidence_matrices
order_prev <- example[[4]][-1]
if (length(compress_DAG) > burin_iter) {
weight_MIS[i] <- weight_MIS[i-1]*weight[i]
total_DAG <- Reduce("+", lapply(burin_iter:i, function(k) weight_MIS[k]*compress_DAG[[k+1]]))
current_mat <- total_DAG/sum(weight_MIS) # Average the edges of DAGs after burn in part
ess_DAGs[i] <- is_results$ess_value
}else if (length(compress_DAG) == burin_iter){
weight_MIS[i] <- weight[i]
}else{
weight_MIS[i] <- 0
ess_DAGs[i] <- 0
sum_matrix <- Reduce("+", compress_DAG[1:length(compress_DAG)])
current_mat <- sum_matrix/i
}
edge_over_time[,,i] <- current_mat
}
# Return the results
return(list(# DAGs = DAG[-c(1:burin_iter)],
edge_prob = edge_over_time[,,-c(1:burin_iter)],
essValues = ess_DAGs[-c(1:burin_iter)],
acceptCount = count_accept[-c(1:burin_iter)],
betas = weighted_betas[[iter+1]]
# ,totalscore_of_DAGs = totalscore_of_DAGs[-c(1:burin_iter)]
)
)
}
num_iterations <- 20
set.seed(100)
results_seed300 <- BetaOrderSampler_gibbs(n = n, iteration = num_iterations, order_iter = 100,
# order = list(c(4,2,1,3)),
order_stepsize = 10, moveprobs = moveprobs,
edgesposterior = edgesposterior )
pedges_comp300 <-  list()
pedges_comp300[[1]] <- edgep(orderfitBoston100, pdag=FALSE)
pedges_comp300[[2]] <- results_seed300$edge_prob[,,length(results_seed300$edge_prob[1,1,])]
dimnames(pedges_comp300[[2]]) <- dimnames(pedges_comp300[[1]])
plot_order_betaOrder <- plotpcor(pedges_comp300, xlab="run1", ylab="run2",printedges=TRUE, main = "OrderMCMC and BetaSampler-3000iter-set.seed(100)")
cat("order_betaOrder300: ",plot_order_betaOrder$MSE, plot_order_betaOrder$R2 , "\n")
pedges_comp300
num_iterations <- 200
set.seed(100)
results_seed300 <- BetaOrderSampler_gibbs(n = n, iteration = num_iterations, order_iter = 100,
# order = list(c(4,2,1,3)),
order_stepsize = 10, moveprobs = moveprobs,
edgesposterior = edgesposterior )
pedges_comp300 <-  list()
pedges_comp300[[1]] <- edgep(orderfitBoston100, pdag=FALSE)
pedges_comp300[[2]] <- results_seed300$edge_prob[,,length(results_seed300$edge_prob[1,1,])]
dimnames(pedges_comp300[[2]]) <- dimnames(pedges_comp300[[1]])
plot_order_betaOrder <- plotpcor(pedges_comp300, xlab="run1", ylab="run2",printedges=TRUE, main = "OrderMCMC and BetaSampler-3000iter-set.seed(100)")
cat("order_betaOrder300: ",plot_order_betaOrder$MSE, plot_order_betaOrder$R2 , "\n")
example[[1]][-1]
proposed_orders
proposed_orders[[10]]
DAGs_from_order <- function(order_list, nr_sample, beta_matrix){
all_DAGs <- list()
for(order in (1:length(order_list))){
DAGs_for_order = lapply(1:nr_sample, function(x) samplescore(n, beta_matrix, order_list[[order]]))
# Append these DAGs to the main list
all_DAGs <- c(all_DAGs, DAGs_for_order)
}
return(list(incidence = all_DAGs, logscore = logscore))
}
beta_prev
order_list = proposed_orders
nr_sample = 2
beta_matrix = beta_prev
all_DAGs <- list()
incidence_logscore
all_DAGs <- list()
all_DAGs_logscore <- list()
for(order in (1:length(order_list))){
DAGs_for_order = lapply(1:nr_sample, function(x) samplescore(n, beta_matrix, order_list[[order]]))
# Append these DAGs to the main list
all_DAGs <- c(all_DAGs, DAGs_for_order$incidence)
all_DAGs_logscore <- c(all_DAGs_logscore,DAGs_for_order$logscore)
}
all_DAGs_logscore
all_DAGs_logscore <- list()
for(order in 1:length(order_list)){
DAGs_for_order = lapply(1:nr_sample, function(x) samplescore(n, beta_matrix, order_list[[order]]))
# Append these DAGs to the main list
all_DAGs <- c(all_DAGs, DAGs_for_order$incidence)
all_DAGs_logscore <- c(all_DAGs_logscore,DAGs_for_order$logscore)
}
all_DAGs_logscore
DAGs_from_order <- function(order_list, nr_sample, beta_matrix){
all_DAGs <- list()
all_DAGs_logscore <- list()
for(order in 1:length(order_list)){
DAGs_for_order = lapply(1:nr_sample, function(x) samplescore(n, beta_matrix, order_list[[order]]))
# Append these DAGs to the main list
all_DAGs <- c(all_DAGs, DAGs_for_order$incidence)
all_DAGs_logscore <- c(all_DAGs_logscore,DAGs_for_order$logscore)
}
return(list(incidence = all_DAGs, logscore = all_DAGs_logscore))
}
DAGs_from_order(order_list = proposed_orders, nr_sample = 2, beta_matrix = beta_prev)
order=1
order_list[[order]]
order[[1]]
order <-  list(seq_len(n))
order
order[[1]]
i = 1
lapply(1:nr_sample, function(x) samplescore(n, beta_matrix, order_list[[i]]))
DAGs_from_order <- function(order_list, nr_sample, beta_matrix){
all_DAGs <- list()
all_DAGs_logscore <- list()
for(i in 1:length(order_list)){
sampled_DAGs = lapply(1:nr_sample, function(x) samplescore(n, beta_matrix, order_list[[i]]))
DAGs_for_order <- lapply(sampled_DAGs, function(dag) dag$incidence)
logscores_DAGs <- lapply(sampled_DAGs, function(dag) dag$logscore)
# Append these DAGs to the main list
all_DAGs <- c(all_DAGs, DAGs_for_order)
all_DAGs_logscore <- c(all_DAGs_logscore,logscores_DAGs)
}
return(list(incidence = all_DAGs, logscore = all_DAGs_logscore))
}
DAGs_from_order(order_list = proposed_orders, nr_sample = 2, beta_matrix = beta_prev)
test <- DAGs_from_order(order_list = proposed_orders, nr_sample = 2, beta_matrix = beta_prev)
test$incidence
BetaOrderSampler_gibbs <- function(n, iteration, order_iter = 100, order = NULL,
order_stepsize = 10, moveprobs, base_score = 0,
starting_dag = NULL, betas_init = NULL, skeleton = FALSE,
edgesposterior, burnin = 0.3 ) {
elements <- c(1:n) # Define set of elements
nr_sample <- 1 # Number of generated DAGs under one order
# Initialize order
if (is.null(order)) {
order <-  list(seq_len(n))
}
# Initialize starting DAG if not provided
if (is.null(starting_dag)) {
starting_dag <-list(samplescore(n, betas = matrix(0, nrow = n, ncol = n), order[[1]])$incidence)
}
# Initialize beta matrix
if (is.null(betas_init)) {
calcultion_betas_init <- calculateBetaScoresArray_hash(starting_dag, k = 1, n, base_score = 0)
betas_init <- calcultion_betas_init$allBetaScores[,,1]
# base_score <- calcultion_betas_init$target_DAG_score
base_score <- 0
}
# Initialize variables
beta_prev <- betas_init
order_prev <- order
ess_DAGs <- numeric()
count_accept <- numeric()
diff_BiDAGs <- numeric()
burin_iter <- floor(burnin*iteration)
iter <- iteration + burin_iter
# DAG <- starting_dag
init_sampled_DAGs <- lapply(1:nr_sample, function(x) samplescore(n, betas_init, order[[1]]))
prev_DAG <- lapply(init_sampled_DAGs, function(dag) dag$incidence)
BiDAGscore_prev <- calculateBetaScoresArray_hash(prev_DAG, k = length(prev_DAG), n, base_score)$target_DAG_score
compress_DAG <- starting_dag
total_DAG <- matrix(0, nrow = n, ncol = n)
edge_over_time <- array(0, dim = c(n, n, iter))
edge_diff_over_time <- array(0, dim = c(n, n, iter))
prev_weight <- 1
weight_MIS <- numeric()
weight_MIS_sum <- 1
weight <- numeric()
# Looping through iterations
for (i in 1:iter) {
# Sampling orders with OrderMCMC
example <- orderMCMC_betas(n,startorder = order_prev[[length(order_prev)]] ,iterations = order_iter, betas = beta_prev,
stepsave = order_stepsize, moveprobs) # run the Order MCMC code
proposed_orders <- example[[4]][-1]
sampled_DAGs_fromOrder <- DAGs_from_order(order_list = proposed_orders, nr_sample = 10, beta_matrix = beta_prev)
#  Sample nr_sample DAGs using the last sampled order from OrderMCMC and old beta matrix
# incidence_matrices <- example[[1]][-1] # List of DAGs sampled under previous beta
# incidence_logscore <- example[[2]][-1] # List of logscores of new sampled DAGs under previous beta
incidence_matrices <- sampled_DAGs_fromOrder$incidence # List of DAGs sampled under previous beta
incidence_logscore <- sampled_DAGs_fromOrder$logscore # List of logscores of new sampled DAGs under previous beta
# Update beta matrix using the weights from sampled DAGs
calculation_beta_values <- calculateBetaScoresArray_hash(incidence_matrices, k = length(incidence_matrices) ,n, base_score = base_score)
BiDAGscore_propose_list <- calculation_beta_values$target_DAG_score
BiDAGscore_propose <-  calculate_final_score(BiDAGscore_propose_list, operation = "mean")
beta_values <- calculation_beta_values$allBetaScores
# Update beta matrix using importance sampling
is_results <- importance_DAG(DAGs = incidence_matrices, score_under_betas = incidence_logscore, target_scores = BiDAGscore_propose_list)
weights_proposed <- is_results$importance_weights # normalised weights under old beta
#New beta matrix using the normalised weights
weighted_betas_proposed <- Reduce("+", lapply(1:length(weights_proposed), function(k) beta_values[,,k] * weights_proposed[k]))
# Log score of new DAG set under the old beta
nDAGoBeta_logscore <- calculate_final_score(unlist(incidence_logscore), operation = "mean")
# Log score of old DAG set under the new beta
oDAGnBeta_logscore_list <- lapply(1:length(prev_DAG),
function(k) calculate_DAG_score(DAG_list = prev_DAG[k], permy = order_prev[[k]], weights = NULL ,
betas = weighted_betas_proposed, base_score = base_score))
oDAGnBeta_logscore <- calculate_final_score(unlist(oDAGnBeta_logscore_list), operation = "mean")
# Acceptance ratio
# Test
w_prev <- BiDAGscore_prev - oDAGnBeta_logscore
w_current <- BiDAGscore_propose - nDAGoBeta_logscore
cat("w_prev",w_prev, "w_current", w_current, "\n")
weight[i] <- exp(w_current-w_prev)
cat("weight",weight[i], "\n")
compress_DAG[[i+1]] <- is_results$compress_dag
weighted_betas[[i+1]] <- weighted_betas_proposed
BiDAGscore_prev <- BiDAGscore_propose
prev_DAG <- incidence_matrices
order_prev <- example[[4]][-1]
if (length(compress_DAG) > burin_iter) {
weight_MIS[i] <- weight_MIS[i-1]*weight[i]
total_DAG <- Reduce("+", lapply(burin_iter:i, function(k) weight_MIS[k]*compress_DAG[[k+1]]))
current_mat <- total_DAG/sum(weight_MIS) # Average the edges of DAGs after burn in part
ess_DAGs[i] <- is_results$ess_value
}else if (length(compress_DAG) == burin_iter){
weight_MIS[i] <- weight[i]
}else{
weight_MIS[i] <- 0
ess_DAGs[i] <- 0
sum_matrix <- Reduce("+", compress_DAG[1:length(compress_DAG)])
current_mat <- sum_matrix/i
}
edge_over_time[,,i] <- current_mat
}
# Return the results
return(list(# DAGs = DAG[-c(1:burin_iter)],
edge_prob = edge_over_time[,,-c(1:burin_iter)],
essValues = ess_DAGs[-c(1:burin_iter)],
acceptCount = count_accept[-c(1:burin_iter)],
betas = weighted_betas[[iter+1]]
# ,totalscore_of_DAGs = totalscore_of_DAGs[-c(1:burin_iter)]
)
)
}
num_iterations <- 20
set.seed(100)
results_seed300 <- BetaOrderSampler_gibbs(n = n, iteration = num_iterations, order_iter = 100,
# order = list(c(4,2,1,3)),
order_stepsize = 10, moveprobs = moveprobs,
edgesposterior = edgesposterior )
BetaOrderSampler_gibbs <- function(n, iteration, order_iter = 100, order = NULL,
order_stepsize = 10, moveprobs, base_score = 0,
starting_dag = NULL, betas_init = NULL, skeleton = FALSE,
edgesposterior, burnin = 0.3 ) {
elements <- c(1:n) # Define set of elements
nr_sample <- 1 # Number of generated DAGs under one order
# Initialize order
if (is.null(order)) {
order <-  list(seq_len(n))
}
# Initialize starting DAG if not provided
if (is.null(starting_dag)) {
starting_dag <-list(samplescore(n, betas = matrix(0, nrow = n, ncol = n), order[[1]])$incidence)
}
# Initialize beta matrix
if (is.null(betas_init)) {
calcultion_betas_init <- calculateBetaScoresArray_hash(starting_dag, k = 1, n, base_score = 0)
betas_init <- calcultion_betas_init$allBetaScores[,,1]
# base_score <- calcultion_betas_init$target_DAG_score
base_score <- 0
}
# Initialize variables
beta_prev <- betas_init
order_prev <- order
ess_DAGs <- numeric()
count_accept <- numeric()
diff_BiDAGs <- numeric()
burin_iter <- floor(burnin*iteration)
iter <- iteration + burin_iter
# DAG <- starting_dag
init_sampled_DAGs <- lapply(1:nr_sample, function(x) samplescore(n, betas_init, order[[1]]))
prev_DAG <- lapply(init_sampled_DAGs, function(dag) dag$incidence)
BiDAGscore_prev <- calculateBetaScoresArray_hash(prev_DAG, k = length(prev_DAG), n, base_score)$target_DAG_score
compress_DAG <- starting_dag
total_DAG <- matrix(0, nrow = n, ncol = n)
edge_over_time <- array(0, dim = c(n, n, iter))
edge_diff_over_time <- array(0, dim = c(n, n, iter))
prev_weight <- 1
weight_MIS <- numeric()
weight_MIS_sum <- 1
weight <- numeric()
# Looping through iterations
for (i in 1:iter) {
# Sampling orders with OrderMCMC
example <- orderMCMC_betas(n,startorder = order_prev[[length(order_prev)]] ,iterations = order_iter, betas = beta_prev,
stepsave = order_stepsize, moveprobs) # run the Order MCMC code
proposed_orders <- example[[4]][-1]
sampled_DAGs_fromOrder <- DAGs_from_order(order_list = proposed_orders, nr_sample = 10, beta_matrix = beta_prev)
#  Sample nr_sample DAGs using the last sampled order from OrderMCMC and old beta matrix
# incidence_matrices <- example[[1]][-1] # List of DAGs sampled under previous beta
# incidence_logscore <- example[[2]][-1] # List of logscores of new sampled DAGs under previous beta
incidence_matrices <- sampled_DAGs_fromOrder$incidence # List of DAGs sampled under previous beta
incidence_logscore <- sampled_DAGs_fromOrder$logscore # List of logscores of new sampled DAGs under previous beta
# Update beta matrix using the weights from sampled DAGs
calculation_beta_values <- calculateBetaScoresArray_hash(incidence_matrices, k = length(incidence_matrices) ,n, base_score = base_score)
BiDAGscore_propose_list <- calculation_beta_values$target_DAG_score
BiDAGscore_propose <-  calculate_final_score(BiDAGscore_propose_list, operation = "mean")
beta_values <- calculation_beta_values$allBetaScores
# Update beta matrix using importance sampling
is_results <- importance_DAG(DAGs = incidence_matrices, score_under_betas = incidence_logscore, target_scores = BiDAGscore_propose_list)
weights_proposed <- is_results$importance_weights # normalised weights under old beta
#New beta matrix using the normalised weights
weighted_betas_proposed <- Reduce("+", lapply(1:length(weights_proposed), function(k) beta_values[,,k] * weights_proposed[k]))
# Log score of new DAG set under the old beta
nDAGoBeta_logscore <- calculate_final_score(unlist(incidence_logscore), operation = "mean")
# Log score of old DAG set under the new beta
oDAGnBeta_logscore_list <- lapply(1:length(prev_DAG),
function(k) calculate_DAG_score(DAG_list = prev_DAG[k], permy = order_prev[[k]], weights = NULL ,
betas = weighted_betas_proposed, base_score = base_score))
oDAGnBeta_logscore <- calculate_final_score(unlist(oDAGnBeta_logscore_list), operation = "mean")
# Acceptance ratio
# Test
w_prev <- BiDAGscore_prev - oDAGnBeta_logscore
w_current <- BiDAGscore_propose - nDAGoBeta_logscore
cat("w_prev",w_prev, "w_current", w_current, "\n")
weight[i] <- exp(w_current-w_prev)
cat("weight",weight[i], "\n")
compress_DAG[[i+1]] <- is_results$compress_dag
weighted_betas[[i+1]] <- weighted_betas_proposed
BiDAGscore_prev <- BiDAGscore_propose
prev_DAG <- incidence_matrices
order_prev <- proposed_orders
if (length(compress_DAG) > burin_iter) {
weight_MIS[i] <- weight_MIS[i-1]*weight[i]
total_DAG <- Reduce("+", lapply(burin_iter:i, function(k) weight_MIS[k]*compress_DAG[[k+1]]))
current_mat <- total_DAG/sum(weight_MIS) # Average the edges of DAGs after burn in part
ess_DAGs[i] <- is_results$ess_value
}else if (length(compress_DAG) == burin_iter){
weight_MIS[i] <- weight[i]
}else{
weight_MIS[i] <- 0
ess_DAGs[i] <- 0
sum_matrix <- Reduce("+", compress_DAG[1:length(compress_DAG)])
current_mat <- sum_matrix/i
}
edge_over_time[,,i] <- current_mat
}
# Return the results
return(list(# DAGs = DAG[-c(1:burin_iter)],
edge_prob = edge_over_time[,,-c(1:burin_iter)],
essValues = ess_DAGs[-c(1:burin_iter)],
acceptCount = count_accept[-c(1:burin_iter)],
betas = weighted_betas[[iter+1]]
# ,totalscore_of_DAGs = totalscore_of_DAGs[-c(1:burin_iter)]
)
)
}
BetaOrderSampler_gibbs <- function(n, iteration, order_iter = 100, order = NULL,
order_stepsize = 10, moveprobs, base_score = 0,
starting_dag = NULL, betas_init = NULL, skeleton = FALSE,
edgesposterior, burnin = 0.3 ) {
elements <- c(1:n) # Define set of elements
nr_sample <- 1 # Number of generated DAGs under one order
# Initialize order
if (is.null(order)) {
order <-  list(seq_len(n))
}
# Initialize starting DAG if not provided
if (is.null(starting_dag)) {
starting_dag <-list(samplescore(n, betas = matrix(0, nrow = n, ncol = n), order[[1]])$incidence)
}
# Initialize beta matrix
if (is.null(betas_init)) {
calcultion_betas_init <- calculateBetaScoresArray_hash(starting_dag, k = 1, n, base_score = 0)
betas_init <- calcultion_betas_init$allBetaScores[,,1]
# base_score <- calcultion_betas_init$target_DAG_score
base_score <- 0
}
# Initialize variables
beta_prev <- betas_init
order_prev <- order
ess_DAGs <- numeric()
count_accept <- numeric()
diff_BiDAGs <- numeric()
burin_iter <- floor(burnin*iteration)
iter <- iteration + burin_iter
# DAG <- starting_dag
init_sampled_DAGs <- lapply(1:nr_sample, function(x) samplescore(n, betas_init, order[[1]]))
prev_DAG <- lapply(init_sampled_DAGs, function(dag) dag$incidence)
BiDAGscore_prev <- calculateBetaScoresArray_hash(prev_DAG, k = length(prev_DAG), n, base_score)$target_DAG_score
compress_DAG <- starting_dag
total_DAG <- matrix(0, nrow = n, ncol = n)
edge_over_time <- array(0, dim = c(n, n, iter))
edge_diff_over_time <- array(0, dim = c(n, n, iter))
prev_weight <- 1
weight_MIS <- numeric()
weight_MIS_sum <- 1
weight <- numeric()
# Looping through iterations
for (i in 1:iter) {
# Sampling orders with OrderMCMC
example <- orderMCMC_betas(n,startorder = order_prev ,iterations = order_iter, betas = beta_prev,
stepsave = order_stepsize, moveprobs) # run the Order MCMC code
proposed_orders <- example[[4]][-1]
sampled_DAGs_fromOrder <- DAGs_from_order(order_list = proposed_orders, nr_sample = 10, beta_matrix = beta_prev)
#  Sample nr_sample DAGs using the last sampled order from OrderMCMC and old beta matrix
# incidence_matrices <- example[[1]][-1] # List of DAGs sampled under previous beta
# incidence_logscore <- example[[2]][-1] # List of logscores of new sampled DAGs under previous beta
incidence_matrices <- sampled_DAGs_fromOrder$incidence # List of DAGs sampled under previous beta
incidence_logscore <- sampled_DAGs_fromOrder$logscore # List of logscores of new sampled DAGs under previous beta
# Update beta matrix using the weights from sampled DAGs
calculation_beta_values <- calculateBetaScoresArray_hash(incidence_matrices, k = length(incidence_matrices) ,n, base_score = base_score)
BiDAGscore_propose_list <- calculation_beta_values$target_DAG_score
BiDAGscore_propose <-  calculate_final_score(BiDAGscore_propose_list, operation = "mean")
beta_values <- calculation_beta_values$allBetaScores
# Update beta matrix using importance sampling
is_results <- importance_DAG(DAGs = incidence_matrices, score_under_betas = incidence_logscore, target_scores = BiDAGscore_propose_list)
weights_proposed <- is_results$importance_weights # normalised weights under old beta
#New beta matrix using the normalised weights
weighted_betas_proposed <- Reduce("+", lapply(1:length(weights_proposed), function(k) beta_values[,,k] * weights_proposed[k]))
# Log score of new DAG set under the old beta
nDAGoBeta_logscore <- calculate_final_score(unlist(incidence_logscore), operation = "mean")
# Log score of old DAG set under the new beta
oDAGnBeta_logscore_list <- lapply(1:length(prev_DAG),
function(k) calculate_DAG_score(DAG_list = prev_DAG[k], permy = order_prev[[k]], weights = NULL ,
betas = weighted_betas_proposed, base_score = base_score))
oDAGnBeta_logscore <- calculate_final_score(unlist(oDAGnBeta_logscore_list), operation = "mean")
# Acceptance ratio
# Test
w_prev <- BiDAGscore_prev - oDAGnBeta_logscore
w_current <- BiDAGscore_propose - nDAGoBeta_logscore
cat("w_prev",w_prev, "w_current", w_current, "\n")
weight[i] <- exp(w_current-w_prev)
cat("weight",weight[i], "\n")
compress_DAG[[i+1]] <- is_results$compress_dag
weighted_betas[[i+1]] <- weighted_betas_proposed
BiDAGscore_prev <- BiDAGscore_propose
prev_DAG <- incidence_matrices
order_prev <- proposed_orders
if (length(compress_DAG) > burin_iter) {
weight_MIS[i] <- weight_MIS[i-1]*weight[i]
total_DAG <- Reduce("+", lapply(burin_iter:i, function(k) weight_MIS[k]*compress_DAG[[k+1]]))
current_mat <- total_DAG/sum(weight_MIS) # Average the edges of DAGs after burn in part
ess_DAGs[i] <- is_results$ess_value
}else if (length(compress_DAG) == burin_iter){
weight_MIS[i] <- weight[i]
}else{
weight_MIS[i] <- 0
ess_DAGs[i] <- 0
sum_matrix <- Reduce("+", compress_DAG[1:length(compress_DAG)])
current_mat <- sum_matrix/i
}
edge_over_time[,,i] <- current_mat
}
# Return the results
return(list(# DAGs = DAG[-c(1:burin_iter)],
edge_prob = edge_over_time[,,-c(1:burin_iter)],
essValues = ess_DAGs[-c(1:burin_iter)],
acceptCount = count_accept[-c(1:burin_iter)],
betas = weighted_betas[[iter+1]]
# ,totalscore_of_DAGs = totalscore_of_DAGs[-c(1:burin_iter)]
)
)
}
num_iterations <- 20
set.seed(100)
results_seed300 <- BetaOrderSampler_gibbs(n = n, iteration = num_iterations, order_iter = 100,
# order = list(c(4,2,1,3)),
order_stepsize = 10, moveprobs = moveprobs,
edgesposterior = edgesposterior )
proposed_orders <- example[[4]][-1]
proposed_orders
